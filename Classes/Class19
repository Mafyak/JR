JDBC

 JDBC - Интерфейс для выполнения sql запросов
  
 DriverManager -> Connection -> Statement -> ResultSet
 
 DriverManager - управление драйверов, выбирает базу, создаёт соединение
 Driver - реализация общих интерфейсов для конкрет базы и конкрет протоколов
 Connection - сессия м\у приложением и драйвером базы
 Запрос - SQL запрос на выборку или измен данных
 Результат - множество строк и столбцов таблицы БД
 Метаданные - сведения о результате(данные о данных)
 
 Типы драйверов:
 Мост - JDBC-ODBC - интерпретирует JDBC-ODBC - чтобы юзать надо поставить ODBC - Надо установить драйвер
 Нативный API - частичный Java драйвер - юзает собственные локальные библиотеки для доступа в БД
 Сетевой протокол - 
 Нативный протокол - для корпоротивных приложений, ничего ставить не надо
 
 Использование: 
    1) Загрузка класса драйвера :  Class.forName("org.mm.mysql.Driver"); - загружает драйвер в память
    2) Установка связи с БД : 
    3) Создание объекта для перед запросов
    4) Выполнение запроса : Statement(простой select) | PreparedStatement(подготовленные запросы) | CallableStatement(хранимые процедуры)
       Метод executeQuery - select запросы 
       Метод executeUpdate - все другие запросы(INSERT, UPDATE, DELETE)
    5) Обработка результата - ResultSet - построчные результаты выполнения работы.
    6) 
    7) Закрытие соединения
    
  Строки начаинаются с 0, столбы с 1.
  
  Statement - обычный легковестный запрос. Не поддерживает динамических запросов
  
  Prepared Statement - executeQuery, executeUpdate(защищает от SQL injection)
  String sql = "INSERT INTO students(name, id) VALUES(?,?)"
  ps.setString(1, "Peter");
  ps.setInt(2, 118); 
  1 - первый вопрос, 2 - второй вопрос
  
  Callable Statement - Хранимая процедура - последовательность команд SQL.
  
  BATCH команды - запускает массив запросов SQL вместе как одну единицу.
  st = com.createStatement();
  st.addBatch("INSERT .... ");
  st.addBatch("INSERT .... ");
  int[] updateCounts = st.executeBatch();
  
  всё надо закрывать - и ResultSet и всё другое
  
  Connection Pool
  db.properties -> db.poolsize = 5;
  
  DBResourceManager 
  
  DAO - управляет соединением с источником данных для получения и записи данных
  DAO - инкапсулирует, упрощает доступ и работу для клиента приложения
  
  Транзакция
 Транзакция состоит из 1 или более выражений(действий) которые либо фиксируют либо откатывают данные
Savepoint позворляет зразделить транзакцибю на логические блоки.
Пример - insert, update, insert, delete. Там где будут сейфпоинты, туда состояние и вернётся.
Типы чтения:
  Dirty reads - если транзакции могуьт видеть несохраненные изменения данных
  Nonrepeatable reads - когда данные во время чтения изменяются 
  Phantom reads - когда транзакция считает данные которые после этого изменились, считают их ещё раз и уже увидят новые
  
  Метаданные
МТ - данные о структуре БД. 
  
  
  
  
  
  
  
  
  
  
  
