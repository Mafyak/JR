lambda выражений - анонимные функции, тоесть метод без объявления.

Синтаксис:
(arg1, arg2, arg3...) -> {body}
(Type arg1, Type arg2...) -> {body}

(int a, int b) -> {return a+b;}
() -> sout("wasup");
() -> {return 3.1415};

Структура:
1) Могут иметь 0+параметров
2) Тип моэжно указывать явно либо нет
3) Параметры заключаются в кругл скобки и разделяются запятыми
4) Можно без параметров: () -> 42;
5) Если параметр один, без типа то скобки можно опустить: a-> return a*a;

Функциональные интерфейсы - интерфейс с одним методом -> Comparator, Comparable, Runnable.

Пример
===================================================
@FunctionalInterface
public interface Worker{
void work();
}

Worker w = () -> sout("work method");
w.work();
===================================================

Пример 2
===================================================
void work(String name);
}

Worker w = name -> sout("work method");
w.work();
===================================================


Все поля которые используются внутри методов анонимных классов надо чтобы поле было final

Function - принимает один параметр, возврат на основе значения тип второго параметра
Predicate - приниматет 1 параметр, возвращает булеан
BiFunction - 2 параметра на вход, возврат на основе значений 
Supplier - не принимает параметров, возвращает результат
Consumer -  принимает один параметр, не возвращает релуьтат (void)

Шаблоны проектирования - многократно используемое решение для широко распространённых проблем.
4 элемента шаблонов:
1) Имя
2) Задача
3) Решение
4) Результаты

+ Работает, стандарт, словарь
- Костыли, неэффективность, неоправданность

Группы - порождающие, структурные, поведение.

Отношение - агрегация(with) композиция(is) зависимость обобщение

https://refactoring.guru/ru/design-patterns - patterns
http://www.oracle.com/technetwork/java/codeconvtoc-136057.html - code conventions

Code Conventions
1) Локальные переменные сразу перед использованием
2) Поля private
3) javadoc
4) проверять аргументы метод
5) Избегать возврата null 
6) Без пустых catch
7) Применять throws
8) Не больше 80 символов
9) При декларировании всё на отдельной строке

ДЗ - доделать всё и сдать - javadoc, log - на трейнинг бай скинуть ссылку на гит.
ВОПРОС - СДЕЛАТЬ ЛИ ПРОВЕРКУ НА ДУРАКА - нет!!!!!
