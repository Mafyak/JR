ENUM

1. Не могут иметь наследников
2. Могут реализовывать интерфейсы
3. Содержит базовые методы .ordinal() - возвращает позицию перечисления, toString, valueOf, 

season = SEASON.Winter
season = SEASON.valueOf("Winter") вернёт enum с именем WINTER

public enum Season{
  WINTER(-10), SPRING(10), SUMMER(25);
  private int aveTemp;
  Season(int aveTemp){this.aveTemp = AveTemp;}
  public boolean isSpring(){   }
  Season.SPRING.isSpring();
}

Annotations
0. Особый вид интерфейса который предназначен для описания мета-информации
1. Объявляемый метод-аннотация не долджен иметь параметров
2. Не должны пробрасывать исключания
3. Метод должен возвращать либо примитив, либо String, Class, enum или их массив.
4. Использование
    а) Информация для компилятора - чтобы было проще уловить ошибку
    б) Програмные интрументы могуть обрабатывать инфу из аннотаций чтобы генерить код\xml данные
    в) Runtime processing - используются на этапе исполнения
5. Типы аннотаций
    а) Source - только для исходногго кода и сбросится при создании класс-файла
    б) Class - 
    в) Runtime - храниться в .class и доступна во врмея runtime
    
Чтобы контролить время выполнения - @Retention(RetentionPolicy.RUNTIME) или @Retention(RetentionPolicy.CLASS) 

@interface ClassPre {
  String name();
}

@ClassPre(
  name = "Bob";
)

@Target(ElementType.TYPE) - Какой элемент будет использовать аннотацию
@Deprecated - указывает что есть более лучший аналог для использования
@Override -  переопределение
@SuppressWarnings - опасность
@Documented - инфа для джавадока


Логирование
 Log4j - инструмент для формирования журналов сообщений.
  Logger Object - регистратор событий - основной объект логирующий данные
  LogManager - конфигуратор 
  Appender - Направляющий вывод элемент - вывод в порт, сокет
  Layout - выдаёт форматированный вывод
  Filter - фильтр
  Renderer - модификатор логов
  Level - уровни логирования
  
Основы работы
private static final Logger LOG = Logger.getLogger(Example.class);
BasicConfigurator.configure();
LOG.debug("Test log message");

Логгеры - эксземпляр класса логера который посылает сообщения для логгинга.
Trace -> Debug -> Info -> Warn -> Error -> Fatal
LOG.setLevel(Debug) - установка уровня, по дефолту Debug
LOG.getRootLogger() - возращает уровень 
1) Trace - выводит полную информацию и трассировку выполнения программы
2) Debug - Детали информации длоля отладки
3) Info - информация нормальной
4) Warn - Предупреждение что в программе чтото не так
5) Error - в программе произоша ошибка
6) Fatal - произошла фатальная ошибка


private static final Logger LOG = Logger.getLogger("com.epam.tr.CLASSNAME");

 ...
 } catch(Exception ex){
    log.error("Error occured", ex);
 }
 ...
 
 ...
 if(log.isDebugEnabled()){
    log.debug("Result: " + " result"):
 }
 ...
 
Методы для вывода сообщений
log(params)

Хранить параменты можно в файлах .xml и .properties

Appender - объект который определяет что делать с логгирующими сообщениями(консоль или файл)
  1) ConsoleAppender, 
  2) FileAppender
  3) RollingFileAppender(создаёт новый файл при перезаполнения текущего лога, 
  например когда он стал весить больше 100 метров)
  4) 
  5) 
  
  Регистратор наследует все аппендеры своих родителей
  
Layout - конфигураторы формата вывода 
  1) SimpleLayout
  2) HTMLLayout
  3) xmi.XMLLayout
  4) TTCCLayout
  5) PatterntLayout
  
Параметры
  1) %d(ABSOLUTE) - выводит время
  2) %5p - выводит уровень лога, 5 - значит что 5 символов DEBUG(если 3 то DEB)
  3) %t - имя потока
  4) %c{1} - категория, сколько уровней показывать
  5) %M - имя метода
  6) %L - номер строки
  7) %m - сообщение которое передано в лог
  8) %n - перевод строки
  

Версия log4j2 - дополненые возможности
EventLogger - механизм логгирования, при событиях


ДЗ - подключить log4j к проекту, создать файл конфигурации логов, все sout - меняем на логи, 
  кетчи - меняем на лог.ерор в файл и в консоль, лог дебаг - только в файл(полезная инфа для отладки), 
  стандартную инфу в инфо - в консоль выводим.
